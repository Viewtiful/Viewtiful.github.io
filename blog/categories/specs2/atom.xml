<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Specs2 | Personal blog]]></title>
  <link href="http://Viewtiful.github.io/blog/categories/specs2/atom.xml" rel="self"/>
  <link href="http://Viewtiful.github.io/"/>
  <updated>2014-09-13T19:51:10+02:00</updated>
  <id>http://Viewtiful.github.io/</id>
  <author>
    <name><![CDATA[Baptiste]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Selenium to Test the AngularUI Datepicker From the Todo Application]]></title>
    <link href="http://Viewtiful.github.io/blog/2014/09/13/using-selenium-to-test-the-datepicker-from-the-todo-application/"/>
    <updated>2014-09-13T16:32:56+02:00</updated>
    <id>http://Viewtiful.github.io/blog/2014/09/13/using-selenium-to-test-the-datepicker-from-the-todo-application</id>
    <content type="html"><![CDATA[<p>In the last post I added a date picker to my todo application which is built using Play framework in Scala and AngularJS.
Just to remember, here is a screenshot of the date picker :</p>

<p><img class="center" src="/assets/posts_images/datepicker.png" title="The date picker from AngularUI" ></p>

<p>What would be nice is to test it with Selenium.
So the general goal of the test in my application is as follow :</p>

<p><img class="center" src="/assets/posts_images/todo_selenium_test.png" title="General goal of the test for the todo application" ></p>

<p>But what interest us here is this part :</p>

<p><img class="center" src="/assets/posts_images/todo_selenium_test2.png" title="The date picker part on the test" ></p>

<p>So the point of this part of the test is to be able to select the 9th of the current month from the date picker.</p>

<p>First step is to open the popup date picker, pretty simple I added an ID to the button for opening the date picker.
The corresponding code for the test just need to find the ID and click on the button (I&rsquo;m using <em><code>FluentLenium</code></em>) :
<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">browser</span><span class="o">.</span><span class="n">$</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="k">#</span><span class="n">date</span><span class="o">-</span><span class="n">picker</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;).</span><span class="n">click</span><span class="o">()</span></code></pre></div></p>

<p>Now the interesting part, in order to select the 9th we need to find a way to click on this day in the date picker.</p>

<p>The first thing to check is the html generated for the 9th of the month button.
<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;td</span> <span class="na">id=</span><span class="s">&quot;datepicker-008-6172-9&quot;</span> <span class="na">class=</span><span class="s">&quot;text-center ng-scope&quot;</span> <span class="na">aria-disabled=</span><span class="s">&quot;false&quot;</span> <span class="na">role=</span><span class="s">&quot;gridcell&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;dt in row track by dt.date&quot;</span><span class="nt">&gt;</span>
   <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-default btn-sm&quot;</span> <span class="na">tabindex=</span><span class="s">&quot;-1&quot;</span> <span class="na">ng-disabled=</span><span class="s">&quot;dt.disabled&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;select(dt.date)&quot;</span> <span class="na">ng-class=</span><span class="s">&quot;{&#39;btn-info&#39;: dt.selected, active: isActive(dt)}&quot;</span> <span class="na">style=</span><span class="s">&quot;width:100%;&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span><span class="nt">&gt;</span>
     <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;ng-binding&quot;</span> <span class="na">ng-class=</span><span class="s">&quot;{&#39;text-muted&#39;: dt.secondary, &#39;text-info&#39;: dt.current}&quot;</span><span class="nt">&gt;</span>
       09
     <span class="nt">&lt;/span&gt;</span>
   <span class="nt">&lt;/button&gt;</span>
<span class="nt">&lt;/td&gt;</span></code></pre></div></p>

<p>In this html, we need to find a unique pattern for selecting the 9th button.
As you can see, the <em><code>td</code></em> element has an ID. So we could use it directly.
Unfortunately, part of this ID is random but one part is always the same and correspond to the day of the month, so we can actually use this part.
Indeed the last part of <em><code>datepicker-008-6172-9</code></em> correspond to the day, here it is <em><code>9</code></em>.
So we can use this as the pattern for selecting the day we want!</p>

<p>The following snippet contains the code for selecting the <em><code>td</code></em> element corresponding to the 9th day of the current month.
<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">browser</span><span class="o">.</span><span class="n">$</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">td</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">withId</span><span class="o">().</span><span class="n">contains</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;-</span><span class="mi">9</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)).</span><span class="n">find</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">button</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;).</span><span class="n">click</span><span class="o">()</span></code></pre></div></p>

<p>Explanation of the snippet :</p>

<p>In Play framework, <em><code>$</code></em> correspond to the <em><code>find</code></em> method in <em><code>FluentLenium</code></em> for searching element.
So basically, the snippet mean : Find a <em><code>td</code></em> element with an ID containing <em><code>-9</code></em>. Inside this element search for a <em><code>button</code></em> and click on it.</p>

<p>Here is what the test looks like with selenium in action :</p>

<p><img class="center" src="/assets/posts_images/datepicker_selenium.gif" title="General goal of the test for the todo application" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Selenium With Scala, Play Framework and Specs2]]></title>
    <link href="http://Viewtiful.github.io/blog/2014/08/29/welcome-to-jekyll/"/>
    <updated>2014-08-29T18:01:52+02:00</updated>
    <id>http://Viewtiful.github.io/blog/2014/08/29/welcome-to-jekyll</id>
    <content type="html"><![CDATA[<p>At work, I used Selenium when I had to build a tool for writting and running automated tests.</p>

<p>I&rsquo;m currently playing around with the Play framework in Scala and I thought it would be nice to be able to execute tests with Selenium.
I&rsquo;m using <a href="https://github.com/etorreborre/specs2">Specs2</a> as a testing framework and I wanted to use Selenium with it.</p>

<p>So let&rsquo;s do it!</p>

<hr />

<h2>Adding Dependencies</h2>

<p>First, we need to add the dependencies for Selenium (the current version is 2.42.0) in the build.sbt file :</p>

<p><div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
  <span class="o">&amp;</span><span class="n">hellip</span><span class="o">;</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">org</span><span class="o">.</span><span class="n">seleniumhq</span><span class="o">.</span><span class="n">selenium</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">%</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">selenium</span><span class="o">-</span><span class="n">java</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">%</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="mf">2.42</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">%</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">test</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
<span class="o">)</span></code></pre></div></p>

<p>To test everything is alright, just use <em><code>sbt compile</code></em> or <em><code>activator compile</code></em> (depending on what you are using).</p>

<hr />

<h2>Writing a simple test using Selenium</h2>

<p>Next step : Creating a simple test for our application(Write a Scala file in the <code>test</code> folder). The goal of this test is actually quite simple! Just launching firefox on our local application to ensure that everything is working.</p>

<p>Here is the test :
<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">import</span> <span class="nn">org.openqa.selenium.firefox.FirefoxDriver</span>
<span class="k">import</span> <span class="nn">org.specs2.mutable.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
<span class="k">import</span> <span class="nn">org.specs2.runner.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span>
<span class="k">import</span> <span class="nn">org.junit.runner._&lt;/p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">import</span> <span class="nn">play.api.test.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span>
<span class="k">import</span> <span class="nn">play.api.test.Helpers.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;@</span><span class="nc">RunWith</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">JUnitRunner</span><span class="o">])</span>
<span class="k">class</span> <span class="nc">IntegrationSpec</span> <span class="k">extends</span> <span class="nc">Specification</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="nc">Application</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">should</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s">&quot;work from within a browser&quot;</span> <span class="n">in</span> <span class="k">new</span> <span class="nc">WithBrowser</span><span class="o">(</span><span class="n">webDriver</span> <span class="k">=</span> <span class="nc">WebDriverFactory</span><span class="o">(</span><span class="nc">Helpers</span><span class="o">.</span><span class="nc">FIREFOX</span><span class="o">))</span> <span class="o">{</span>

  <span class="n">browser</span><span class="o">.</span><span class="n">goTo</span><span class="o">(</span><span class="s">&quot;http://localhost:&quot;</span> <span class="o">+</span> <span class="n">port</span><span class="o">)</span>
<span class="o">}</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}</span>
<span class="o">}</span></code></pre></div></p>

<hr />

<h2>Running the test</h2>

<p>Running the test is quite simple too, just use <em><code>sbt test</code></em> or <em><code>activator test</code></em>.</p>

<p>The output should be similar to this :
<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Loading</span> <span class="n">project</span> <span class="n">definition</span> <span class="n">from</span> <span class="o">/</span><span class="n">home</span><span class="o">/&amp;</span><span class="n">hellip</span><span class="o">;/</span><span class="nc">Scala</span><span class="o">/</span><span class="n">project</span><span class="o">-</span><span class="n">name</span><span class="o">/</span><span class="n">project</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Set</span> <span class="n">current</span> <span class="n">project</span> <span class="n">to</span> <span class="nc">Todo</span> <span class="o">(</span><span class="n">in</span> <span class="n">build</span> <span class="n">file</span><span class="o">:/</span><span class="n">home</span><span class="o">/&amp;</span><span class="n">hellip</span><span class="o">;/</span><span class="nc">Scala</span><span class="o">/</span><span class="n">project</span><span class="o">-</span><span class="n">name</span><span class="o">/)</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Application</span> <span class="n">should</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="o">+</span> <span class="n">work</span> <span class="n">from</span> <span class="n">within</span> <span class="n">a</span> <span class="n">browser</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Total</span> <span class="k">for</span> <span class="n">specification</span> <span class="nc">IntegrationSpec</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Finished</span> <span class="n">in</span> <span class="mi">7</span> <span class="n">seconds</span><span class="o">,</span> <span class="mi">16</span> <span class="n">ms</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="mi">1</span> <span class="n">example</span><span class="o">,</span> <span class="mi">0</span> <span class="n">failure</span><span class="o">,</span> <span class="mi">0</span> <span class="n">error</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Passed</span><span class="k">:</span> <span class="kt">Total</span> <span class="err">1</span><span class="o">,</span> <span class="nc">Failed</span> <span class="mi">0</span><span class="o">,</span> <span class="nc">Errors</span> <span class="mi">0</span><span class="o">,</span> <span class="nc">Passed</span> <span class="mi">1</span>
<span class="o">[</span><span class="kt">success</span><span class="o">]</span> <span class="nc">Total</span> <span class="n">time</span><span class="k">:</span> <span class="err">7</span> <span class="kt">s</span><span class="o">,</span> <span class="n">completed</span> <span class="mi">29</span> <span class="n">août</span> <span class="mi">2014</span> <span class="mi">16</span><span class="k">:</span><span class="err">45</span><span class="kt">:</span><span class="err">44</span></code></pre></div></p>

<p>That&rsquo;s it! You should now be able to write tests that are executing in a browser.</p>
]]></content>
  </entry>
  
</feed>
