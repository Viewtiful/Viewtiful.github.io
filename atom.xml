<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Personal blog]]></title>
  <link href="http://Viewtiful.github.io/atom.xml" rel="self"/>
  <link href="http://Viewtiful.github.io/"/>
  <updated>2014-09-12T15:08:15+02:00</updated>
  <id>http://Viewtiful.github.io/</id>
  <author>
    <name><![CDATA[Baptiste]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using AngularJS UI Datepicker With CoffeeScript]]></title>
    <link href="http://Viewtiful.github.io/blog/2014/09/12/using-angularjs-ui-datepicker-with-coffeescript/"/>
    <updated>2014-09-12T10:55:48+02:00</updated>
    <id>http://Viewtiful.github.io/blog/2014/09/12/using-angularjs-ui-datepicker-with-coffeescript</id>
    <content type="html"><![CDATA[<p>I&rsquo;m currently playing around and building a simple todo application and
I wanted to add a date picker for the expected end date of a todo.</p>

<p>Good thing <a href="http://angular-ui.github.io/bootstrap/">AngularUI Bootstrap</a> proposes one!
Here is a screenshot</p>

<p><img class="center" src="http://Viewtiful.github.io/assets/posts_images/datepicker.png" title="The date picker from AngularUI" ></p>

<p>I chose to use it as a popup when clicking on a button at the right of the input element.
So I will explain how to use it this way. But there is many different ways to use it demonstrated in the documentation.</p>

<h2>The HTML</h2>

<p>First thing first, we need to add the necessary html for displaying the date picker.</p>

<p>Here is the corresponding stripped html :</p>

<div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;NewTodoCtrl as ntc&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div&gt;</span>
      <span class="nt">&lt;label</span> <span class="na">id=</span><span class="s">&quot;label_end_time&quot;</span> <span class="na">for=</span><span class="s">&quot;end_time&quot;</span> <span class="na">class=</span><span class="s">&quot;control-label&quot;</span><span class="nt">&gt;</span>End date<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;input-group&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">class=</span><span class="s">&quot;form-control&quot;</span> <span class="na">id=</span><span class="s">&quot;end_time&quot;</span> <span class="na">name=</span><span class="s">&quot;end_time&quot;</span>
            <span class="na">placeholder=</span><span class="s">&quot;End date&quot;</span> <span class="na">data-ng-model=</span><span class="s">&quot;ntc.todo.end_time&quot;</span> 
            <span class="na">data-datepicker-popup=</span><span class="s">&quot;&quot;</span> <span class="na">data-is-open=</span><span class="s">&quot;opened&quot;</span><span class="nt">&gt;</span>
          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;input-group-btn&quot;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;btn btn-default&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;ntc.open()&quot;</span><span class="nt">&gt;</span>
              <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;glyphicon glyphicon-calendar&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
            <span class="nt">&lt;/button&gt;</span>
          <span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></div>


<p>You should see something similar to this :</p>

<p><img class="center" src="http://Viewtiful.github.io/assets/posts_images/html_picker.png"></p>

<p>What is important in this snippet :</p>

<p>Since we are using AngularJS, we need a controller that will handle the date and
the popup date picker.
Mine is named <em><code>NewTodoCtrl</code></em>.</p>

<p>Inside the input element :</p>

<ul>
<li>Adding a model which will contains the date populated by the date picker <em><code>data-ng-model=ntc.todo.end_time</code></em></li>
<li><em><code>data-picker-popup</code></em> which is used to handle the date picker as a popup.
The default format is used here but you can change it.</li>
<li><em><code>data-is-open="opened"</code></em> is used to notify the view from the controller for opening the popup.</li>
</ul>


<p>The calendar button next to the input element is calling an <em><code>open</code></em> function contained in the controller.
The controller will then modify the opened variable to <em><code>true</code></em> for displaying the popup.</p>

<h2>The controller</h2>

<p>The controller is pretty simple, we just initialize the date corresponding to the <em><code>data-ng-model</code></em> in the constructor.</p>

<p>A function <em><code>open</code></em> is used to open the popup containing the date picker.
We use the <em><code>$scope</code></em> to modify the <em><code>opened</code></em> variable from the view and <em><code>$timeout</code></em>
to delay the execution with the default timeout of the navigator.</p>

<div class="highlight"><pre><code class="language-coffeescript" data-lang="coffeescript"><span class="k">class</span> <span class="nx">NewTodoCtrl</span>

  <span class="nv">constructor: </span><span class="nf">(@$scope, @$log, @$timeout) -&gt;</span>
   <span class="nx">@$log</span><span class="p">.</span><span class="nx">debug</span> <span class="s">&quot;constructing NewTodoCtrl&quot;</span>
   <span class="vi">@todo = </span><span class="p">{}</span>
   <span class="vi">@todo.end_time = </span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>

  <span class="nv">open: </span><span class="nf">() -&gt;</span>
   <span class="nx">@$log</span><span class="p">.</span><span class="nx">debug</span> <span class="s">&quot;Opening the date picker&quot;</span>
   <span class="nx">@$timeout</span> <span class="p">(</span><span class="nf">=&gt;</span>
     <span class="vi">@$scope.opened = </span><span class="kc">true</span></code></pre></div>


<p>With all of this, you should now have an input element that contains the current
date selected from a popup date picker.</p>

<p>Current date by default in the input :</p>

<p><img class="center" src="http://Viewtiful.github.io/assets/posts_images/html_picker2.png"></p>

<p>When clicking on the calendar icon, the popup date picker is displayed :</p>

<p><img class="center" src="http://Viewtiful.github.io/assets/posts_images/html_picker3.png"></p>

<p>You can test the example as a JSFiddle : <a href="http://jsfiddle.net/bXFdM/106/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Selenium With Scala, Play Framework and Specs2]]></title>
    <link href="http://Viewtiful.github.io/blog/2014/08/29/welcome-to-jekyll/"/>
    <updated>2014-08-29T18:01:52+02:00</updated>
    <id>http://Viewtiful.github.io/blog/2014/08/29/welcome-to-jekyll</id>
    <content type="html"><![CDATA[<p>At work, I used Selenium when I had to build a tool for writting and running automated tests.</p>

<p>I&rsquo;m currently playing around with the Play framework in Scala and I thought it would be nice to be able to execute tests with Selenium.
I&rsquo;m using <a href="https://github.com/etorreborre/specs2">Specs2</a> as a testing framework and I wanted to use Selenium with it.</p>

<p>So let&rsquo;s do it!</p>

<hr />

<h2>Adding Dependencies</h2>

<p>First, we need to add the dependencies for Selenium (the current version is 2.42.0) in the build.sbt file :</p>

<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
  <span class="o">...</span>
  <span class="s">&quot;org.seleniumhq.selenium&quot;</span> <span class="o">%</span> <span class="s">&quot;selenium-java&quot;</span> <span class="o">%</span> <span class="s">&quot;2.42.0&quot;</span> <span class="o">%</span> <span class="s">&quot;test&quot;</span>
<span class="o">)</span></code></pre></div>


<p>To test everything is alright, just use <em><code>sbt compile</code></em> or <em><code>activator compile</code></em> (depending on what you are using).</p>

<hr />

<h2>Writing a simple test using Selenium</h2>

<p>Next step : Creating a simple test for our application(Write a Scala file in the <code>test</code> folder). The goal of this test is actually quite simple! Just launching firefox on our local application to ensure that everything is working.</p>

<p>Here is the test :</p>

<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">import</span> <span class="nn">org.openqa.selenium.firefox.FirefoxDriver</span>
<span class="k">import</span> <span class="nn">org.specs2.mutable._</span>
<span class="k">import</span> <span class="nn">org.specs2.runner._</span>
<span class="k">import</span> <span class="nn">org.junit.runner._</span>

<span class="k">import</span> <span class="nn">play.api.test._</span>
<span class="k">import</span> <span class="nn">play.api.test.Helpers._</span>

<span class="nd">@RunWith</span><span class="o">(</span><span class="n">classOf</span><span class="o">[</span><span class="kt">JUnitRunner</span><span class="o">])</span>
<span class="k">class</span> <span class="nc">IntegrationSpec</span> <span class="k">extends</span> <span class="nc">Specification</span> <span class="o">{</span>

  <span class="s">&quot;Application&quot;</span> <span class="n">should</span> <span class="o">{</span>

    <span class="s">&quot;work from within a browser&quot;</span> <span class="n">in</span> <span class="k">new</span> <span class="nc">WithBrowser</span><span class="o">(</span><span class="n">webDriver</span> <span class="k">=</span> <span class="nc">WebDriverFactory</span><span class="o">(</span><span class="nc">Helpers</span><span class="o">.</span><span class="nc">FIREFOX</span><span class="o">))</span> <span class="o">{</span>

      <span class="n">browser</span><span class="o">.</span><span class="n">goTo</span><span class="o">(</span><span class="s">&quot;http://localhost:&quot;</span> <span class="o">+</span> <span class="n">port</span><span class="o">)</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></div>


<hr />

<h2>Running the test</h2>

<p>Running the test is quite simple too, just use <em><code>sbt test</code></em> or <em><code>activator test</code></em>.</p>

<p>The output should be similar to this :</p>

<div class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Loading</span> <span class="n">project</span> <span class="n">definition</span> <span class="n">from</span> <span class="o">/</span><span class="n">home</span><span class="o">/.../</span><span class="nc">Scala</span><span class="o">/</span><span class="n">project</span><span class="o">-</span><span class="n">name</span><span class="o">/</span><span class="n">project</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Set</span> <span class="n">current</span> <span class="n">project</span> <span class="n">to</span> <span class="nc">Todo</span> <span class="o">(</span><span class="n">in</span> <span class="n">build</span> <span class="n">file</span><span class="o">:/</span><span class="n">home</span><span class="o">/.../</span><span class="nc">Scala</span><span class="o">/</span><span class="n">project</span><span class="o">-</span><span class="n">name</span><span class="o">/)</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> 
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Application</span> <span class="n">should</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="o">+</span> <span class="n">work</span> <span class="n">from</span> <span class="n">within</span> <span class="n">a</span> <span class="n">browser</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> 
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Total</span> <span class="k">for</span> <span class="n">specification</span> <span class="nc">IntegrationSpec</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Finished</span> <span class="n">in</span> <span class="mi">7</span> <span class="n">seconds</span><span class="o">,</span> <span class="mi">16</span> <span class="n">ms</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="mi">1</span> <span class="n">example</span><span class="o">,</span> <span class="mi">0</span> <span class="n">failure</span><span class="o">,</span> <span class="mi">0</span> <span class="n">error</span>
<span class="o">[</span><span class="kt">info</span><span class="o">]</span> <span class="nc">Passed</span><span class="k">:</span> <span class="kt">Total</span> <span class="err">1</span><span class="o">,</span> <span class="nc">Failed</span> <span class="mi">0</span><span class="o">,</span> <span class="nc">Errors</span> <span class="mi">0</span><span class="o">,</span> <span class="nc">Passed</span> <span class="mi">1</span>
<span class="o">[</span><span class="kt">success</span><span class="o">]</span> <span class="nc">Total</span> <span class="n">time</span><span class="k">:</span> <span class="err">7</span> <span class="kt">s</span><span class="o">,</span> <span class="n">completed</span> <span class="mi">29</span> <span class="n">août</span> <span class="mi">2014</span> <span class="mi">16</span><span class="k">:</span><span class="err">45</span><span class="kt">:</span><span class="err">44</span></code></pre></div>


<p>That&rsquo;s it! You should now be able to write tests that are executing in a browser.</p>
]]></content>
  </entry>
  
</feed>
